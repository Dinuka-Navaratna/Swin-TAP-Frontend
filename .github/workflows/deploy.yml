name: Deploy to Surge

on:
  push:
    branches:
      - staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Add CNAME file
        run: echo "autoassure.me" > build/CNAME

      - name: Add _redirects file
        run: echo "/* /index.html 200" > build/_redirects

      - name: Add 200.html file
        run: cp build/index.html build/200.html

      - name: Add 404.html file
        run: cp build/index.html build/404.html

      - name: Ensure service worker is in build directory
        run: cp src/serviceWorker.js build/serviceWorker.js

      - name: Install Octokit
        run: npm install @octokit/rest

      - name: Create Deployment
        id: create_deployment
        run: |
          node -e "
          const { Octokit } = require('@octokit/rest');
          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
          octokit.repos.createDeployment({
            owner: '${{ github.repository_owner }}',
            repo: '${{ github.event.repository.name }}',
            ref: '${{ github.sha }}',
            required_contexts: [],
            environment: 'staging',
            description: 'Deploying to Surge'
          }).then(({ data }) => {
            console.log('Deployment ID:', data.id);
            console.log('::set-output name=deployment_id::' + data.id);
          }).catch(err => {
            console.error(err);
            process.exit(1);
          });
          "
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Surge
        env:
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
        run: |
          npm install -g surge
          surge ./build autoassure.me --token $SURGE_TOKEN

      - name: Update Deployment Status to Success
        if: success()
        run: |
          node -e "
          const { Octokit } = require('@octokit/rest');
          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
          octokit.repos.createDeploymentStatus({
            owner: '${{ github.repository_owner }}',
            repo: '${{ github.event.repository.name }}',
            deployment_id: '${{ steps.create_deployment.outputs.deployment_id }}',
            state: 'success'
          }).catch(err => {
            console.error(err);
            process.exit(1);
          });
          "
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Deployment Status to Failure
        if: failure()
        run: |
          node -e "
          const { Octokit } = require('@octokit/rest');
          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
          octokit.repos.createDeploymentStatus({
            owner: '${{ github.repository_owner }}',
            repo: '${{ github.event.repository.name }}',
            deployment_id: '${{ steps.create_deployment.outputs.deployment_id }}',
            state: 'failure'
          }).catch(err => {
            console.error(err);
            process.exit(1);
          });
          "
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
